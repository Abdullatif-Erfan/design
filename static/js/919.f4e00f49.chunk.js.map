{"version":3,"file":"static/js/919.f4e00f49.chunk.js","mappings":"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","sources":["components/container/MainContainer.tsx","components/loader/spinner/Spinner.jsx","hook/SensorAPIservices.tsx","components/button/Button.tsx","pages/home/sensorsTable/SensorsListTable.jsx","pages/charts/sensorChart/SensorsChart.jsx","pages/home/card/HomeCards.tsx","pages/home/Home.tsx","utils/axios.jsx"],"sourcesContent":["import React, { CSSProperties } from \"react\";\r\nimport \"./containerStyle.css\";\r\ntype chilPropsType = {\r\n  children?: React.ReactNode;\r\n  styleAsProps?: CSSProperties;\r\n  className?: string;\r\n};\r\nfunction MainContainer({ className, children, styleAsProps }: chilPropsType) {\r\n  return (\r\n    <section className={`section ${className}`} style={styleAsProps}>\r\n      <div className=\"row\">{children}</div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MainContainer;\r\n","import \"./spinnerStyle.css\";\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinnerWrapper\">\r\n      <div class=\"lds-ripple\">\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Spinner;\r\n","import { useQuery } from \"react-query\";\r\nimport axiosInstance from \"../utils/axios\";\r\nimport sensorsTypes4API from \"../types/Types\";\r\nimport { axiosResponseTypes } from \"../types/Types\";\r\n\r\n/**\r\n * ------------ API Requests ------------\r\n * http://localhost:5000/home/sensors_list\r\n * http://localhost:5000/home/total_sensors\r\n * http://localhost:5000/home/total_customers\r\n * http://localhost:5000/home/total_open_alerts\r\n * http://localhost:5000/home/sensor_temp_char\r\n */\r\n\r\nconst fetchTotalSensorsData = async () => {\r\n  const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n    \"home/total_sensors\"\r\n  );\r\n  return response;\r\n};\r\nconst fetchSensorsData = async (pageNumber: number, limitPerPage: number) => {\r\n  const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n    `home/sensors_list?page=${pageNumber}&limit=${limitPerPage}`\r\n  );\r\n  return response;\r\n};\r\n\r\nconst fetchTotalOpenAlertsData = async () => {\r\n  const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n    \"home/total_open_alerts\"\r\n  );\r\n  return response;\r\n};\r\n\r\nconst getHomeChartData = async () => {\r\n  const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n    \"home/sensor_temp_char\"\r\n  );\r\n  return response;\r\n};\r\n\r\nconst fetchTotalCustomersData = async () => {\r\n  const response = await axiosInstance.get<axiosResponseTypes, any>(\r\n    \"home/total_customers\"\r\n  );\r\n  return response;\r\n};\r\n\r\nexport const TotalSenserAPIServices = () => {\r\n  return useQuery(\"totalSensors\", fetchTotalSensorsData);\r\n};\r\n\r\nexport const SenserAPIServices = ({\r\n  currentPage,\r\n  itemsPerPage,\r\n  onSuccess,\r\n  onError\r\n}: sensorsTypes4API) => {\r\n  return useQuery(\r\n    [\"sensors_list\", currentPage],\r\n    () => fetchSensorsData(currentPage, itemsPerPage),\r\n    {\r\n      onSuccess,\r\n      onError,\r\n      keepPreviousData: true\r\n    }\r\n  );\r\n};\r\n\r\nexport const OpenAlertAPIServices = () => {\r\n  return useQuery(\"totalAlerts\", fetchTotalOpenAlertsData);\r\n};\r\n\r\nexport const ChartAPIServices = () => {\r\n  return useQuery(\"chart_data\", getHomeChartData);\r\n};\r\n\r\nexport const TotalCustomersAPIServices = () => {\r\n  return useQuery(\"totalCustomers\", fetchTotalCustomersData);\r\n};\r\n\r\n/**\r\n *  ----------------- NOTE ! ----------------------------------\r\n * Some usefull Configuration Options will be described here\r\n * 1 - refetchOnWindowFocus: automatically requests fresh data in the background if user leaves the app and returns to stale data.\r\n * 2 - refetchOnmount: if true, refetch on mount if the data is stale.\r\n * 3 - refetchOnReconnect: if true, refetch on reconnect if the data is stale.\r\n * 4 - retry: if true, failed queries will retry infinitely.\r\n * 5 - staleTime: the time in milliseconds after data is considered stale. Defaults to 0.\r\n */\r\n// ---------------- Example -------------------\r\n// const queryClient = new QueryClient({\r\n//   defaultOptions: {\r\n//     queries: {\r\n//       refetchOnWindowFocus: false,\r\n//       refetchOnmount: false,\r\n//       refetchOnReconnect: false,\r\n//       retry: false,\r\n//       staleTime: 5*60*1000,\r\n//     },\r\n//   },\r\n// });\r\n","import React, { CSSProperties } from \"react\";\r\ninterface ButtonProps {\r\n  color?: \"primary\" | \"secondary\" | \"default\" | \"inherit\";\r\n  children: string | React.ReactNode;\r\n  type?: \"submit\" | any;\r\n  className?: string;\r\n  onClick?: () => void;\r\n  style?: CSSProperties;\r\n}\r\nconst Button: React.FC<ButtonProps> = ({\r\n  children,\r\n  color,\r\n  style,\r\n  onClick,\r\n  type,\r\n  className\r\n}) => {\r\n  return (\r\n    <button\r\n      type={type}\r\n      onClick={onClick}\r\n      color={color}\r\n      style={style}\r\n      className={className}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\nexport default React.memo(Button);\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport SensorTypes from \"../../../types/Types\";\r\nimport { SenserAPIServices } from \"../../../hook/SensorAPIservices\";\r\nimport \"./sensorsListTable.css\";\r\nimport Spinner from \"../../../components/loader/spinner/Spinner\";\r\nimport Button from \"../../../components/button/Button\";\r\n\r\nfunction SensorsListTable({ totalSensors }) {\r\n  const totalSensor = parseInt(totalSensors);\r\n\r\n  // --------- Pagination Setup Hooks ------------------------\r\n  const [currentPage, setcurrentPage] = useState(1);\r\n  const [itemsPerPage, setitemsPerPage] = useState(5);\r\n  const [pageNumberLimit, setpageNumberLimit] = useState(5);\r\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\r\n\r\n  const onSuccess = data => {\r\n    // console.log(\"Perform side effect after data fetching\", data);\r\n  };\r\n  const onError = error => {\r\n    // return <h1>{error.message}</h1>;\r\n  };\r\n\r\n  // ----------------- Get Data From API using reactQuery -----------------\r\n  const params = { currentPage, itemsPerPage, onSuccess, onError };\r\n  const { isLoading, isError, data, error, isFetching } = SenserAPIServices(\r\n    params\r\n  );\r\n  const currentItems = data?.data.results;\r\n  const nextPage = data?.data.next;\r\n  const prevPage = data?.data.previous;\r\n\r\n  // -------------- Create Array of page number for pagination --------\r\n  const pages = [];\r\n  for (let i = 1; i <= Math.ceil(totalSensor / itemsPerPage); i++) {\r\n    pages.push(i); //  150 / 5 => 30 pages\r\n  }\r\n\r\n  const handleClick = event => {\r\n    setcurrentPage(Number(event.target.id));\r\n  };\r\n\r\n  const handleNextbtn = () => {\r\n    setcurrentPage(currentPage + 1);\r\n\r\n    if (currentPage + 1 > maxPageNumberLimit) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  const handlePrevbtn = () => {\r\n    setcurrentPage(currentPage - 1);\r\n    if ((currentPage - 1) % pageNumberLimit === 0) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  let pageIncrementBtn = null;\r\n  if (pages.length > maxPageNumberLimit) {\r\n    pageIncrementBtn = <li onClick={handleNextbtn}> &hellip; </li>;\r\n  }\r\n\r\n  let pageDecrementBtn = null;\r\n  if (minPageNumberLimit >= 1) {\r\n    pageDecrementBtn = <li onClick={handlePrevbtn}> &hellip; </li>;\r\n  }\r\n\r\n  // const handleLoadMore = () => {\r\n  //   setitemsPerPage(itemsPerPage + 5);\r\n  // };\r\n\r\n  const handlePrevPage = () => {\r\n    setcurrentPage(prevPage.page);\r\n  };\r\n  const handleNextPage = () => {\r\n    setcurrentPage(nextPage.page);\r\n  };\r\n\r\n  // ---------------- Add active class to active list item ----------------\r\n  const renderPageNumbers = pages.map(number => {\r\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n      return (\r\n        <li\r\n          key={number}\r\n          id={number}\r\n          onClick={handleClick}\r\n          className={currentPage === number ? \"active\" : null}\r\n        >\r\n          {number}\r\n        </li>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"col-lg-12 m-t-20\">\r\n      <div className=\"card\">\r\n        {/* Setting Left Icon */}\r\n        <div className=\"filter\">\r\n          <a className=\"icon\" href=\"#\">\r\n            <i className=\"bi bi-gear\" />\r\n          </a>\r\n        </div>\r\n        {/* End Setting Left Icon */}\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">SENSOR LIST</h5>\r\n\r\n          {/* ----- Show Errors when occured ------ */}\r\n          {isError && (\r\n            <div className=\"errorWrapper\">\r\n              {error instanceof Error && (\r\n                <div className=\"errorMessage\">{error.message}</div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {/* ----- End of Show Errors ----- */}\r\n          {isLoading ? (\r\n            <Spinner />\r\n          ) : (\r\n            <div className=\"sensorListWrapper\">\r\n              <table className=\"table table-striped\">\r\n                <tbody>\r\n                  {currentItems.map(\r\n                    ({\r\n                      device_id,\r\n                      last_online,\r\n                      last_temp,\r\n                      customer,\r\n                      location\r\n                    }) => {\r\n                      return renderData(\r\n                        device_id,\r\n                        last_online,\r\n                        last_temp,\r\n                        location\r\n                      );\r\n                    }\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n              <ul className=\"pageNumbers\">\r\n                <li>\r\n                  <button onClick={handlePrevPage} disabled={currentPage === 1}>\r\n                    Prev\r\n                  </button>\r\n                </li>\r\n                {pageDecrementBtn}\r\n                {renderPageNumbers}\r\n                {pageIncrementBtn}\r\n                <li>\r\n                  <button\r\n                    onClick={handleNextPage}\r\n                    disabled={currentPage === totalSensor}\r\n                  >\r\n                    Next\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n\r\n              <div className=\"col-12 loading\">{isFetching && \"Loading...\"}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  function renderData(device_id, last_online, last_temp, location) {\r\n    return (\r\n      <tr key={device_id}>\r\n        <th>{device_id}</th>\r\n        <td className=\"hidden-xs\">\r\n          {moment(parseInt(last_online)).format(\"ll\")}\r\n          <br />\r\n          <small>Last Online</small>\r\n        </td>\r\n        <td className=\"hidden-xs\">\r\n          {last_temp}\r\n          <br />\r\n          <small>Temp</small>\r\n        </td>\r\n        <td>\r\n          {location}\r\n          <br />\r\n          <small>Location</small>\r\n        </td>\r\n        <td className=\"hidden-xs\">\r\n          <Button className=\"optionsButton\">Options</Button>\r\n        </td>\r\n        <td>\r\n          <Link to={`/sensorDetails/${device_id}`}>\r\n            <Button className=\"detailsButton\">Details</Button>\r\n          </Link>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React.memo(SensorsListTable);\r\n","import \"./sensorsChartStyle.css\";\r\nimport \"chartjs-adapter-moment\";\r\n\r\nimport { ChartAPIServices } from \"../../../hook/SensorAPIservices\";\r\n\r\nimport moment from \"moment\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  TimeScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from \"chart.js\";\r\nimport Spinner from \"../../../components/loader/spinner/Spinner\";\r\nChartJS.register(\r\n  TimeScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport const options = {\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n    position: \"bottom\"\r\n  },\r\n  scales: {\r\n    x: {\r\n      type: \"time\",\r\n      time: {\r\n        displayFormats: {\r\n          millisecond: \"MM/YY\",\r\n          second: \"MM/YY\",\r\n          minute: \"MM/YY\",\r\n          hour: \"MM/YY\",\r\n          day: \"MM/YY\",\r\n          week: \"MM/YY\",\r\n          month: \"MM/YY\",\r\n          quarter: \"MM/YY\",\r\n          year: \"MM/YY\"\r\n        },\r\n        tooltipFormat: \"DD/MM/YY\"\r\n      }\r\n    },\r\n    y: {\r\n      ticks: {\r\n        min: 20.0,\r\n        max: 65.0,\r\n        stepSize: 5.0,\r\n        callback: function(value, index, values) {\r\n          return value + \".0 °C\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst SensorsChart = () => {\r\n  const { isLoading, isError, data, error } = ChartAPIServices();\r\n  // ---------- Handling Loading and Errors -----------------\r\n  if (isLoading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  const APIData = data?.data.records;\r\n  /**\r\n   * 1. Get APIData\r\n   * 2. select stats of each device using map function\r\n   * 3. rename time as a x and temp as a y of each stats (Note! this graph just needs x and y)\r\n   * 4. get device id to show as a label\r\n   */\r\n  const allStats = APIData.map(item => item.stats);\r\n  // rename fileds for first device\r\n  const value1 = allStats[0].map(({ time: x, temp: y }) => ({ x, y }));\r\n  const value2 = allStats[1].map(({ time: x, temp: y }) => ({ x, y }));\r\n  const value3 = allStats[2].map(({ time: x, temp: y }) => ({ x, y }));\r\n  const allDevicesName = APIData.map(item => item.device_id);\r\n\r\n  const chartData = {\r\n    datasets: [\r\n      {\r\n        label: allDevicesName[0],\r\n        data: value1,\r\n        borderColor: [\"rgb(186 181 181)\"],\r\n        backgroundColor: [\"rgba(255, 99, 132, 0.5)\"],\r\n        pointBackgroundColor: \"rgb(255, 99, 132)\",\r\n        pointBorderColor: \"rgba(255, 99, 132, 0.5)\",\r\n        borderWidth: 1\r\n      },\r\n      {\r\n        label: allDevicesName[1],\r\n        data: value2,\r\n        borderColor: [\"rgb(7 156 204)\"],\r\n        backgroundColor: [\"rgb(7 156 204)\"],\r\n        pointBackgroundColor: \"rgb(7 156 204)\",\r\n        pointBorderColor: \"rgb(7 156 204)\",\r\n        borderWidth: 1\r\n      },\r\n      {\r\n        label: allDevicesName[2],\r\n        data: value3,\r\n        borderColor: [\"rgb(244 108 119)\"],\r\n        backgroundColor: [\"rgb(233 30 46)\"],\r\n        pointBackgroundColor: \"rgb(233 30 46)\",\r\n        pointBorderColor: \"rgb(233 30 46)\",\r\n        borderWidth: 1\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-12 col-sm-12 col-xs-12\">\r\n      <div className=\"row\">\r\n        <div className=\"sensorChartWrapper\">\r\n          <h4 className=\"chartTitle\">SENSORS TEMPRATURES</h4>\r\n\r\n          {/* ----- Show Errors when occured ------ */}\r\n          {isError && (\r\n            <div className=\"errorWrapper\">\r\n              {error instanceof Error && (\r\n                <div className=\"errorMessage\">{error.message}</div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {/* ----- End of Show Errors ----- */}\r\n\r\n          {isLoading ? (\r\n            <Spinner />\r\n          ) : (\r\n            <Line options={options} data={chartData} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SensorsChart;\r\n","type chilPropsType = {\r\n  title?: string;\r\n  iconName?: string;\r\n  data?: number;\r\n};\r\nconst HomeCards = ({ title, iconName, data }: chilPropsType) => {\r\n  return (\r\n    <div className=\"col-md-4\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"d-flex align-items-center justify-content-between\">\r\n            <div className=\"ps-3\">\r\n              <h6>{title}</h6>\r\n              <span className=\"text-muted small pt-2 ps-1\">{data}</span>\r\n            </div>\r\n            <div className=\"card-icon rounded-circle d-flex align-items-center justify-content-center\">\r\n              <i className={`bi ${iconName}`} style={{ fontSize: \"25px\" }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default HomeCards;\r\n","\r\nimport React, {  Fragment } from \"react\";\r\n// import Spinner from \"../../components/loader/spinner/Spinner\";\r\nimport {  OpenAlertAPIServices ,TotalCustomersAPIServices, TotalSenserAPIServices } from \"../../hook/SensorAPIservices\"\r\n\r\nimport SensorsListTable from \"./sensorsTable/SensorsListTable\";\r\nimport SensorsChart from \"../charts/sensorChart/SensorsChart\";\r\nimport HomeCards from \"./card/HomeCards\";\r\nimport MainContainer from \"../../components/container/MainContainer\";\r\nimport Spinner from \"../../components/loader/spinner/Spinner\";\r\n\r\n\r\n\r\n\r\nconst HomePage : React.FC = () => {\r\n\r\n// ----------------- Get Data From API using reactQuery -----------------\r\nconst { isLoading: isLoadingTotalSensors, isError: isErrorTotalSensors, data: totalSensorsData, error: errorTotalSensors } = TotalSenserAPIServices();\r\nconst { isLoading: isLoadingAlerts , isError: isErrorAlerts, data: totalAlertsData, error: errorAlert } = OpenAlertAPIServices();\r\nconst { isLoading: isLoadingCustomer , isError: isErrorCustomer, data: totalCustomersData, error: errorCustomer } = TotalCustomersAPIServices();\r\n\r\n\r\n// ------------------- set Loading and Errors --------------------------\r\nconst isLoading = isLoadingTotalSensors || isLoadingAlerts || isLoadingCustomer \r\nconst isError = isErrorTotalSensors ||  isErrorAlerts  || isErrorCustomer  \r\n// const errors = [errorTotalSensors, errorAlert, errorCustomer];\r\n\r\n\r\n// get the data and set it into variables\r\nconst totalSensors = totalSensorsData?.data.records;\r\nconst totalAlerts = totalAlertsData?.data.records;\r\nconst totalCustomers = totalCustomersData?.data.records;\r\n   \r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* ------------- Main Content of Home Page -------------- */}\r\n        <main id=\"main\" className=\"main\">\r\n          <MainContainer  className=\"dashboard\" />\r\n          {/* ----- Show Errors when occured ------ */}\r\n          {/* {\r\n            isError &&\r\n            <div className=\"errorWrapper\">\r\n              { errorTotalSensors instanceof Error &&   <div className=\"errorMessage\">{errorTotalSensors.message}</div> }\r\n              { errorAlert instanceof Error && \r\n                    <div className=\"errorMessage\">{errorAlert.message}</div> } \r\n              { errorCustomer instanceof Error &&  \r\n                    <div className=\"errorMessage\">{errorCustomer.message}</div>} \r\n            </div>\r\n            } */}\r\n            {/* ----- End of Show Errors ----- */}\r\n\r\n\r\n            {/* ---------- Total Report ----- */}\r\n            <div className=\"col-lg-12\">\r\n              <div className=\"row\">\r\n              {\r\n                isLoading ?  <Spinner /> :\r\n                <Fragment>\r\n                  <HomeCards title=\"TOTAL SENSORS\" iconName=\"bi-kanban\" data={totalSensors} />  \r\n                  <HomeCards title=\"OPEN ALERTS\" iconName=\"bi-tags-fill\" data={totalAlerts} />            \r\n                  <HomeCards title=\"TOTAL CUSTOMERS\" iconName=\"bi-pc-display-horizontal\" data={totalCustomers} /> \r\n                </Fragment>\r\n              }  \r\n              </div>\r\n            </div>\r\n            {/* -------- End Total Report----- */}\r\n\r\n\r\n            {/* ---Sensor Temprature Graph --- */}\r\n                <SensorsChart />\r\n            {/* --- End of Sensor Temprature Graph --- */}\r\n\r\n\r\n            {/* --- Sensor List With Pagination --- */}\r\n               <SensorsListTable totalSensors={totalSensors}  />\r\n            {/* --- End of Sensor List --- */}\r\n\r\n          \r\n      {/* ----------- End of Main Content of Home Page ---------- */}\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import axios from \"axios\";\r\nconst baseURL = process.env.REACT_APP_BACKEDN_URL;\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseURL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"names":["className","children","styleAsProps","style","class","fetchTotalSensorsData","axiosInstance","response","fetchSensorsData","pageNumber","limitPerPage","fetchTotalOpenAlertsData","getHomeChartData","fetchTotalCustomersData","Button","color","onClick","type","React","SensorsListTable","totalSensors","totalSensor","parseInt","useState","currentPage","setcurrentPage","itemsPerPage","pageNumberLimit","maxPageNumberLimit","setmaxPageNumberLimit","minPageNumberLimit","setminPageNumberLimit","onSuccess","onError","useQuery","keepPreviousData","SenserAPIServices","data","error","isLoading","isError","isFetching","currentItems","results","nextPage","next","prevPage","previous","pages","i","Math","ceil","push","handleClick","event","Number","target","id","pageIncrementBtn","length","pageDecrementBtn","renderPageNumbers","map","number","href","Error","message","Spinner","device_id","last_online","last_temp","customer","location","moment","format","to","renderData","page","disabled","ChartJS","TimeScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","options","maintainAspectRatio","legend","display","position","scales","x","time","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","tooltipFormat","y","ticks","min","max","stepSize","callback","value","index","values","APIData","records","allStats","item","stats","value1","temp","value2","value3","allDevicesName","chartData","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","borderWidth","title","iconName","fontSize","isLoadingTotalSensors","totalSensorsData","isLoadingAlerts","totalAlertsData","isLoadingCustomer","totalCustomersData","totalAlerts","totalCustomers","Fragment","MainContainer","axios","baseURL","process","headers"],"sourceRoot":""}