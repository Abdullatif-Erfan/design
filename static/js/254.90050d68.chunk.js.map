{"version":3,"file":"static/js/254.90050d68.chunk.js","mappings":"0JAeA,MARA,YAA8E,IAArDA,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,aAC5C,OACE,oBAASF,UAAS,kBAAaA,GAAaG,MAAOD,EAAnD,UACE,gBAAKF,UAAU,MAAf,SAAsBC,KAG3B,C,uJCCKG,EAAU,yCAAG,WAAMC,GAAN,qGAEQC,EAAAA,EAAAA,KAAmB,aAAaD,GAFxC,cAETE,EAFS,yBAGRA,GAHQ,gCAKfC,QAAQC,IAAI,KAAIC,SALD,yDAAH,sD,mBCiIhB,EAzIoB,WAClB,OAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aAEaC,GAJf,EAGEC,MAHF,EAIEC,UAAaF,QAGf,EDS6B,SAAAT,GAO7B,IAAMY,GAAcC,EAAAA,EAAAA,kBAIpB,OAAOC,EAAAA,EAAAA,aAAYf,EAAY,CAC7BgB,UAAW,SAACf,GAGVY,EAAYI,eAAe,CAAC,eAAgB,IAAI,SAAAC,GAE9C,OAAO,kBACFA,GADL,IAEEjB,KAAK,CAAEA,EAAKA,MAAR,eAAiBiB,EAAajB,QAErC,GACF,GAEJ,CC5BKkB,GAJMC,EADV,EACEC,OADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,MAgBF,OACE,SAAC,EAAAC,SAAD,WAEE,kBAAMC,GAAG,OAAO9B,UAAU,OAA1B,WACE,SAAC+B,EAAA,EAAD,CAAe/B,UAAU,eAEzB,gBAAKA,UAAU,YAAf,UACE,iBAAKA,UAAU,MAAf,WAEE,iBAAKA,UAAU,+BAAf,WACE,wCACA,mBAEA,kBAAMgC,SAAUnB,GA1BX,SAAAR,GACf,IAAM4B,EAAcC,KAAKC,MACnBC,EAAW,CACfC,UAAWhC,EAAKgC,UAChBJ,YAAaA,EACbK,UAAWjC,EAAKiC,UAChBC,SAAU,aACVC,SAAUnC,EAAKmC,UAEjBhB,EAAQY,EACT,IAgBW,WAEE,gBAAKpC,UAAU,qBAAf,UACE,0BAAOyC,YAAY,aAAgB7B,EAAS,kBAG9C,iBAAKZ,UAAU,qBAAf,WACE,0BACEyC,YAAY,YACR7B,EAAS,WAAY,CAAE8B,UAAU,MAEtC5B,EAAO0B,WACN,gBAAKxC,UAAU,QAAf,wCAKJ,gBAAKA,UAAU,wBAKf,iBAAKA,UAAU,4BAAf,WACE,0BACE2C,KAAK,SACLC,KAAK,MACLH,YAAY,aACR7B,EAAS,YAAa,CACxB8B,SAAU,CACRG,OAAO,EACPnC,QAAS,0BAEXoC,QAAS,CACPD,MAAO,WACPnC,QAAS,gCAKf,gBAAKV,UAAU,QAAf,SACGc,EAAOwB,WAAaxB,EAAOwB,UAAU5B,cAI1C,mBACA,kBAAMV,UAAU,iBAAhB,WACE,mBAAQ2C,KAAK,SAAS3C,UAAU,eAAhC,yBAGA,mBAAQA,UAAU,eAAlB,8BAON,iBAAKA,UAAU,8BAAf,WACE,mCADF,KACkB,mBAChB,iBAAKA,UAAU,qBAAf,WACE,iBAAKA,UAAU,qBAAf,WACE,0BAAOyC,YAAY,WAAc7B,EAAS,cAC1C,mBACA,oCACMA,EAAS,YADf,IAEE+B,KAAK,WACLE,MAAM,cACN7C,UAAU,cAEZ,iBAAMA,UAAU,gBAAhB,yCAGF,iBAAKA,UAAU,qBAAf,WACE,0BAAOyC,YAAY,WAAc7B,EAAS,cAC1C,mBACA,oCACMA,EAAS,YADf,IAEE+B,KAAK,WACLE,MAAM,cACN7C,UAAU,cAEZ,kBAAMA,UAAU,gBAAhB,UACG,IADH,yBAEyB,cAI7B,8BAQb,C,oCC3IKM,E,MAAgByC,GAAAA,OAAa,CACjCC,QAFcC,mCAGdC,QAAS,CACP,eAAgB,sBAIpB,K","sources":["components/container/MainContainer.tsx","hook/InsertSensors.jsx","pages/sensors/sensorsList/SensorsList.jsx","utils/axios.jsx"],"sourcesContent":["import React, { CSSProperties } from \"react\";\r\nimport \"./containerStyle.css\";\r\ntype chilPropsType = {\r\n  children?: React.ReactNode;\r\n  styleAsProps?: CSSProperties;\r\n  className?: string;\r\n};\r\nfunction MainContainer({ className, children, styleAsProps }: chilPropsType) {\r\n  return (\r\n    <section className={`section ${className}`} style={styleAsProps}>\r\n      <div className=\"row\">{children}</div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MainContainer;\r\n","import axiosInstance from \"../utils/axios\";\r\nimport {\r\n  useQuery,\r\n  useMutation,\r\n  useQueryClient,\r\n  QueryClient\r\n} from \"react-query\";\r\n\r\n\r\n/**\r\n * ------------ API Requests ------------\r\n * http://localhost:5000/operations\r\n */\r\n \r\nconst addNewData = async data => {\r\n  try {\r\n    const response = await axiosInstance.post(\"operations\",data);\r\n    return response;\r\n  } catch (err) {\r\n    console.log(err.message);\r\n  }\r\n};\r\n\r\nexport const useAddNewSensor = data => {\r\n \r\n /**\r\n   * After adding new data, it would be better to stop sending request to get the updated data\r\n   * Just add new data in client side into the query cache \r\n   * For this purpose we have to use queryClient Object\r\n   */\r\n  const queryClient = useQueryClient();\r\n  /**\r\n   * onSuccess method send new request and get udated date\r\n   */\r\n  return useMutation(addNewData, {\r\n    onSuccess: (data) => {\r\n      // data is axios response which send to the useMutation method as a result\r\n      // queryClient.invalidateQueries([\"sensors_list\", 1])\r\n      queryClient.setQueriesData([\"sensors_list\", 1], oldQueryData => {\r\n        //setQueriesData automaticall get oldQueryData\r\n        return {\r\n          ...oldQueryData,\r\n          data: [data.data, ...oldQueryData.data]\r\n        };\r\n      });\r\n    }\r\n  });\r\n};\r\n","import { Fragment, useState } from \"react\";\r\nimport MainContainer from \"../../../components/container/MainContainer\";\r\nimport { useAddNewSensor } from \"../../../hook/InsertSensors\";\r\nimport \"./sensorsListStyle.css\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst SensorsList = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors }\r\n  } = useForm();\r\n\r\n  const {\r\n    mutate: addData,\r\n    isLoading: addingDataLoader,\r\n    isError: isAddingError,\r\n    error: AddingError\r\n  } = useAddNewSensor();\r\n\r\n  const onSubmit = data => {\r\n    const last_online = Date.now();\r\n    const formData = {\r\n      device_id: data.device_id,\r\n      last_online: last_online,\r\n      last_temp: data.last_temp,\r\n      customer: 'customer-1',  // Next task is to get the list and provide dropdown list\r\n      location: data.location\r\n    };\r\n    addData(formData);\r\n  };\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* ------------- Main Content of Home Page -------------- */}\r\n      <main id=\"main\" className=\"main\">\r\n        <MainContainer className=\"dashboard\" />\r\n        {/* ---------- Total Report ----- */}\r\n        <div className=\"col-lg-12\">\r\n          <div className=\"row\">\r\n            {/* ---------- Add Sensor Part ----------- */}\r\n            <div className=\"col-md-8 col-sm-8 col-xs-12 \">\r\n              <h4>New Sensor</h4>\r\n              <hr />\r\n\r\n              <form onSubmit={handleSubmit(onSubmit)}>\r\n                {/* register your input into the hook by invoking the \"register\" function */}\r\n                <div className=\"form-fields m-t-20\">\r\n                  <input placeholder=\"Sensor ID\" {...register(\"device_id\")} />\r\n                </div>\r\n\r\n                <div className=\"form-fields m-t-20\">\r\n                  <input\r\n                    placeholder=\"location\"\r\n                    {...register(\"location\", { required: true })}\r\n                  />\r\n                  {errors.location && (\r\n                    <div className=\"error\">This field is required</div>\r\n                  )}\r\n                </div>\r\n\r\n\r\n                <div className=\"form-fields m-t-20\">\r\n                  {/* ---- Next Task --------- */}\r\n                  {/* Get Customers List and show as a dropdown list */}\r\n                </div>\r\n\r\n                <div className=\"form-fields m-t-20 m-b-50\">\r\n                  <input\r\n                    type=\"number\"\r\n                    step=\"0.5\"\r\n                    placeholder=\"Last Temp\"\r\n                    {...register(\"last_temp\", {\r\n                      required: {\r\n                        value: true,\r\n                        message: \"Last Temp  is required\"\r\n                      },\r\n                      pattern: {\r\n                        value: /^[0-9]+$/,\r\n                        message: \"Please Type Just number\"\r\n                      }\r\n                    })}\r\n                  />\r\n\r\n                  <div className=\"error\">\r\n                    {errors.last_temp && errors.last_temp.message}\r\n                  </div>\r\n                </div>\r\n\r\n                <hr />\r\n                <span className=\"submit_buttons\">\r\n                  <button type=\"submit\" className=\"submitButton\">\r\n                    Add Sensor\r\n                  </button>\r\n                  <button className=\"cancelButton\">Cancel</button>\r\n                </span>\r\n              </form>\r\n            </div>\r\n            {/* ---------- End of Add Sensor Part ----------- */}\r\n\r\n            {/* ---------- Add Alerts ----------- */}\r\n            <div className=\"col-md-4 col-sm-4 col-xs-12\">\r\n              <h4>Alerts</h4> <hr />\r\n              <div className=\"form-fields m-t-20\">\r\n                <div className=\"form-fields m-t-20\">\r\n                  <input placeholder=\"MinTemp\" {...register(\"minTemp\")} />\r\n                  <br />\r\n                  <input\r\n                    {...register(\"minTemp\")}\r\n                    type=\"checkbox\"\r\n                    value=\"Monitor Min\"\r\n                    className=\"minTemp\"\r\n                  />\r\n                  <span className=\"checkBoxTitle\"> Monitor Min Temprature</span>\r\n                </div>\r\n\r\n                <div className=\"form-fields m-t-20\">\r\n                  <input placeholder=\"MinTemp\" {...register(\"minTemp\")} />\r\n                  <br />\r\n                  <input\r\n                    {...register(\"maxTemp\")}\r\n                    type=\"checkbox\"\r\n                    value=\"Monitor Max\"\r\n                    className=\"maxTemp\"\r\n                  />\r\n                  <span className=\"checkBoxTitle\">\r\n                    {\" \"}\r\n                    Monitor Max Temprature{\" \"}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <hr />\r\n            </div>\r\n            {/* ---------- End of Add Alerts ----------- */}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SensorsList;\r\n","import axios from \"axios\";\r\nconst baseURL = process.env.REACT_APP_BACKEDN_URL;\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseURL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"names":["className","children","styleAsProps","style","addNewData","data","axiosInstance","response","console","log","message","useForm","register","handleSubmit","errors","watch","formState","queryClient","useQueryClient","useMutation","onSuccess","setQueriesData","oldQueryData","useAddNewSensor","addData","mutate","isLoading","isError","error","Fragment","id","MainContainer","onSubmit","last_online","Date","now","formData","device_id","last_temp","customer","location","placeholder","required","type","step","value","pattern","axios","baseURL","process","headers"],"sourceRoot":""}